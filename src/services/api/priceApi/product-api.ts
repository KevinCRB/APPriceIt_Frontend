/* tslint:disable */
/* eslint-disable */
/**
 * APPriceit
 * API description
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProductCreateDTO } from '../priceApiModels';
// @ts-ignore
import { ProductResponseDTO } from '../priceApiModels';
// @ts-ignore
import { ProductUpdateDTO } from '../priceApiModels';
// @ts-ignore
import { ProductWithPricesResponseDTO } from '../priceApiModels';
/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new product
         * @summary 
         * @param {ProductCreateDTO} productCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerCreateProduct: async (productCreateDTO: ProductCreateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCreateDTO' is not null or undefined
            assertParamExists('productControllerCreateProduct', 'productCreateDTO', productCreateDTO)
            const localVarPath = `/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerGetProduct: async (productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productControllerGetProduct', 'productId', productId)
            const localVarPath = `/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerSearchProduct: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('productControllerSearchProduct', 'name', name)
            const localVarPath = `/product/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates *ALL* fields of an existing product with id `productId`
         * @summary 
         * @param {number} productId 
         * @param {ProductUpdateDTO} productUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerUpdateProduct: async (productId: number, productUpdateDTO: ProductUpdateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productControllerUpdateProduct', 'productId', productId)
            // verify required parameter 'productUpdateDTO' is not null or undefined
            assertParamExists('productControllerUpdateProduct', 'productUpdateDTO', productUpdateDTO)
            const localVarPath = `/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets products registered for store
         * @summary 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetStoreProducts: async (storeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeControllerGetStoreProducts', 'storeId', storeId)
            const localVarPath = `/store/{storeId}/products`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new product
         * @summary 
         * @param {ProductCreateDTO} productCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerCreateProduct(productCreateDTO: ProductCreateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerCreateProduct(productCreateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerGetProduct(productId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerGetProduct(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerSearchProduct(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerSearchProduct(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates *ALL* fields of an existing product with id `productId`
         * @summary 
         * @param {number} productId 
         * @param {ProductUpdateDTO} productUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerUpdateProduct(productId: number, productUpdateDTO: ProductUpdateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerUpdateProduct(productId, productUpdateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets products registered for store
         * @summary 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerGetStoreProducts(storeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductWithPricesResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerGetStoreProducts(storeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * Creates a new product
         * @summary 
         * @param {ProductCreateDTO} productCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerCreateProduct(productCreateDTO: ProductCreateDTO, options?: any): AxiosPromise<void> {
            return localVarFp.productControllerCreateProduct(productCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerGetProduct(productId: number, options?: any): AxiosPromise<ProductResponseDTO> {
            return localVarFp.productControllerGetProduct(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerSearchProduct(name: string, options?: any): AxiosPromise<ProductResponseDTO> {
            return localVarFp.productControllerSearchProduct(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates *ALL* fields of an existing product with id `productId`
         * @summary 
         * @param {number} productId 
         * @param {ProductUpdateDTO} productUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerUpdateProduct(productId: number, productUpdateDTO: ProductUpdateDTO, options?: any): AxiosPromise<void> {
            return localVarFp.productControllerUpdateProduct(productId, productUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets products registered for store
         * @summary 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetStoreProducts(storeId: number, options?: any): AxiosPromise<Array<ProductWithPricesResponseDTO>> {
            return localVarFp.storeControllerGetStoreProducts(storeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * Creates a new product
     * @summary 
     * @param {ProductCreateDTO} productCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerCreateProduct(productCreateDTO: ProductCreateDTO, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerCreateProduct(productCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerGetProduct(productId: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerGetProduct(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerSearchProduct(name: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerSearchProduct(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates *ALL* fields of an existing product with id `productId`
     * @summary 
     * @param {number} productId 
     * @param {ProductUpdateDTO} productUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerUpdateProduct(productId: number, productUpdateDTO: ProductUpdateDTO, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerUpdateProduct(productId, productUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets products registered for store
     * @summary 
     * @param {number} storeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public storeControllerGetStoreProducts(storeId: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).storeControllerGetStoreProducts(storeId, options).then((request) => request(this.axios, this.basePath));
    }
}
