/* tslint:disable */
/* eslint-disable */
/**
 * APPriceit
 * API description
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProductWithPricesResponseDTO } from '../priceApiModels';
// @ts-ignore
import { StoreAssignPriceDTO } from '../priceApiModels';
// @ts-ignore
import { StoreAssignProductDTO } from '../priceApiModels';
// @ts-ignore
import { StoreCreateDTO } from '../priceApiModels';
// @ts-ignore
import { StoreIdResponseDTO } from '../priceApiModels';
// @ts-ignore
import { StoreResponseDTO } from '../priceApiModels';
// @ts-ignore
import { StoreUpdateDTO } from '../priceApiModels';
/**
 * StoreApi - axios parameter creator
 * @export
 */
export const StoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a product with id `productId` to the store with id `storeId`
         * @summary 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {StoreAssignProductDTO} storeAssignProductDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerAddProduct: async (storeId: number, productId: number, storeAssignProductDTO: StoreAssignProductDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeControllerAddProduct', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('storeControllerAddProduct', 'productId', productId)
            // verify required parameter 'storeAssignProductDTO' is not null or undefined
            assertParamExists('storeControllerAddProduct', 'storeAssignProductDTO', storeAssignProductDTO)
            const localVarPath = `/store/{storeId}/products/{productId}`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(storeAssignProductDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assign a prize with id `productId` in the store with id `storeId`.
         * @summary 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {StoreAssignPriceDTO} storeAssignPriceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerAssignPrice: async (storeId: number, productId: number, storeAssignPriceDTO: StoreAssignPriceDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeControllerAssignPrice', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('storeControllerAssignPrice', 'productId', productId)
            // verify required parameter 'storeAssignPriceDTO' is not null or undefined
            assertParamExists('storeControllerAssignPrice', 'storeAssignPriceDTO', storeAssignPriceDTO)
            const localVarPath = `/store/{storeId}/products/{productId}/price`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(storeAssignPriceDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new store
         * @summary 
         * @param {StoreCreateDTO} storeCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerCreateStore: async (storeCreateDTO: StoreCreateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeCreateDTO' is not null or undefined
            assertParamExists('storeControllerCreateStore', 'storeCreateDTO', storeCreateDTO)
            const localVarPath = `/store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(storeCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {number} priceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerDeletePrice: async (storeId: number, productId: number, priceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeControllerDeletePrice', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('storeControllerDeletePrice', 'productId', productId)
            // verify required parameter 'priceId' is not null or undefined
            assertParamExists('storeControllerDeletePrice', 'priceId', priceId)
            const localVarPath = `/store/{storeId}/products/{productId}/price/{priceId}`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"priceId"}}`, encodeURIComponent(String(priceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerDeleteStore: async (storeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeControllerDeleteStore', 'storeId', storeId)
            const localVarPath = `/store/{storeId}`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of store with `storeId`
         * @summary 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetStore: async (storeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeControllerGetStore', 'storeId', storeId)
            const localVarPath = `/store/{storeId}`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets products registered for store
         * @summary 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetStoreProducts: async (storeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeControllerGetStoreProducts', 'storeId', storeId)
            const localVarPath = `/store/{storeId}/products`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches for stores within `distance` meters of coords (`lat`,`lon`), with a name that matches `product_id` if provided
         * @summary 
         * @param {number} lat 
         * @param {number} lon 
         * @param {number} distance 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerSearchStores: async (lat: number, lon: number, distance: number, productId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lat' is not null or undefined
            assertParamExists('storeControllerSearchStores', 'lat', lat)
            // verify required parameter 'lon' is not null or undefined
            assertParamExists('storeControllerSearchStores', 'lon', lon)
            // verify required parameter 'distance' is not null or undefined
            assertParamExists('storeControllerSearchStores', 'distance', distance)
            const localVarPath = `/store/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }

            if (distance !== undefined) {
                localVarQueryParameter['distance'] = distance;
            }

            if (productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {StoreAssignPriceDTO} storeAssignPriceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerUpdatePrice: async (storeId: number, productId: number, storeAssignPriceDTO: StoreAssignPriceDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeControllerUpdatePrice', 'storeId', storeId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('storeControllerUpdatePrice', 'productId', productId)
            // verify required parameter 'storeAssignPriceDTO' is not null or undefined
            assertParamExists('storeControllerUpdatePrice', 'storeAssignPriceDTO', storeAssignPriceDTO)
            const localVarPath = `/store/{storeId}/products/{productId}/price`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(storeAssignPriceDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates *ALL* fields of an existing store with id `storeId`
         * @summary 
         * @param {number} storeId 
         * @param {StoreUpdateDTO} storeUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerUpdateStore: async (storeId: number, storeUpdateDTO: StoreUpdateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('storeControllerUpdateStore', 'storeId', storeId)
            // verify required parameter 'storeUpdateDTO' is not null or undefined
            assertParamExists('storeControllerUpdateStore', 'storeUpdateDTO', storeUpdateDTO)
            const localVarPath = `/store/{storeId}`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(storeUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoreApi - functional programming interface
 * @export
 */
export const StoreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoreApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a product with id `productId` to the store with id `storeId`
         * @summary 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {StoreAssignProductDTO} storeAssignProductDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerAddProduct(storeId: number, productId: number, storeAssignProductDTO: StoreAssignProductDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerAddProduct(storeId, productId, storeAssignProductDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Assign a prize with id `productId` in the store with id `storeId`.
         * @summary 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {StoreAssignPriceDTO} storeAssignPriceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerAssignPrice(storeId: number, productId: number, storeAssignPriceDTO: StoreAssignPriceDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerAssignPrice(storeId, productId, storeAssignPriceDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new store
         * @summary 
         * @param {StoreCreateDTO} storeCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerCreateStore(storeCreateDTO: StoreCreateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoreIdResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerCreateStore(storeCreateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {number} priceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerDeletePrice(storeId: number, productId: number, priceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerDeletePrice(storeId, productId, priceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerDeleteStore(storeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerDeleteStore(storeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information of store with `storeId`
         * @summary 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerGetStore(storeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoreResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerGetStore(storeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets products registered for store
         * @summary 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerGetStoreProducts(storeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductWithPricesResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerGetStoreProducts(storeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches for stores within `distance` meters of coords (`lat`,`lon`), with a name that matches `product_id` if provided
         * @summary 
         * @param {number} lat 
         * @param {number} lon 
         * @param {number} distance 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerSearchStores(lat: number, lon: number, distance: number, productId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StoreResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerSearchStores(lat, lon, distance, productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {StoreAssignPriceDTO} storeAssignPriceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerUpdatePrice(storeId: number, productId: number, storeAssignPriceDTO: StoreAssignPriceDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerUpdatePrice(storeId, productId, storeAssignPriceDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates *ALL* fields of an existing store with id `storeId`
         * @summary 
         * @param {number} storeId 
         * @param {StoreUpdateDTO} storeUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerUpdateStore(storeId: number, storeUpdateDTO: StoreUpdateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoreIdResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerUpdateStore(storeId, storeUpdateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StoreApi - factory interface
 * @export
 */
export const StoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoreApiFp(configuration)
    return {
        /**
         * Assign a product with id `productId` to the store with id `storeId`
         * @summary 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {StoreAssignProductDTO} storeAssignProductDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerAddProduct(storeId: number, productId: number, storeAssignProductDTO: StoreAssignProductDTO, options?: any): AxiosPromise<void> {
            return localVarFp.storeControllerAddProduct(storeId, productId, storeAssignProductDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Assign a prize with id `productId` in the store with id `storeId`.
         * @summary 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {StoreAssignPriceDTO} storeAssignPriceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerAssignPrice(storeId: number, productId: number, storeAssignPriceDTO: StoreAssignPriceDTO, options?: any): AxiosPromise<void> {
            return localVarFp.storeControllerAssignPrice(storeId, productId, storeAssignPriceDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new store
         * @summary 
         * @param {StoreCreateDTO} storeCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerCreateStore(storeCreateDTO: StoreCreateDTO, options?: any): AxiosPromise<StoreIdResponseDTO> {
            return localVarFp.storeControllerCreateStore(storeCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {number} priceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerDeletePrice(storeId: number, productId: number, priceId: number, options?: any): AxiosPromise<void> {
            return localVarFp.storeControllerDeletePrice(storeId, productId, priceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerDeleteStore(storeId: number, options?: any): AxiosPromise<void> {
            return localVarFp.storeControllerDeleteStore(storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information of store with `storeId`
         * @summary 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetStore(storeId: number, options?: any): AxiosPromise<StoreResponseDTO> {
            return localVarFp.storeControllerGetStore(storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets products registered for store
         * @summary 
         * @param {number} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetStoreProducts(storeId: number, options?: any): AxiosPromise<Array<ProductWithPricesResponseDTO>> {
            return localVarFp.storeControllerGetStoreProducts(storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches for stores within `distance` meters of coords (`lat`,`lon`), with a name that matches `product_id` if provided
         * @summary 
         * @param {number} lat 
         * @param {number} lon 
         * @param {number} distance 
         * @param {number} [productId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerSearchStores(lat: number, lon: number, distance: number, productId?: number, options?: any): AxiosPromise<Array<StoreResponseDTO>> {
            return localVarFp.storeControllerSearchStores(lat, lon, distance, productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} storeId 
         * @param {number} productId 
         * @param {StoreAssignPriceDTO} storeAssignPriceDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerUpdatePrice(storeId: number, productId: number, storeAssignPriceDTO: StoreAssignPriceDTO, options?: any): AxiosPromise<void> {
            return localVarFp.storeControllerUpdatePrice(storeId, productId, storeAssignPriceDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates *ALL* fields of an existing store with id `storeId`
         * @summary 
         * @param {number} storeId 
         * @param {StoreUpdateDTO} storeUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerUpdateStore(storeId: number, storeUpdateDTO: StoreUpdateDTO, options?: any): AxiosPromise<StoreIdResponseDTO> {
            return localVarFp.storeControllerUpdateStore(storeId, storeUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoreApi - object-oriented interface
 * @export
 * @class StoreApi
 * @extends {BaseAPI}
 */
export class StoreApi extends BaseAPI {
    /**
     * Assign a product with id `productId` to the store with id `storeId`
     * @summary 
     * @param {number} storeId 
     * @param {number} productId 
     * @param {StoreAssignProductDTO} storeAssignProductDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public storeControllerAddProduct(storeId: number, productId: number, storeAssignProductDTO: StoreAssignProductDTO, options?: AxiosRequestConfig) {
        return StoreApiFp(this.configuration).storeControllerAddProduct(storeId, productId, storeAssignProductDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Assign a prize with id `productId` in the store with id `storeId`.
     * @summary 
     * @param {number} storeId 
     * @param {number} productId 
     * @param {StoreAssignPriceDTO} storeAssignPriceDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public storeControllerAssignPrice(storeId: number, productId: number, storeAssignPriceDTO: StoreAssignPriceDTO, options?: AxiosRequestConfig) {
        return StoreApiFp(this.configuration).storeControllerAssignPrice(storeId, productId, storeAssignPriceDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new store
     * @summary 
     * @param {StoreCreateDTO} storeCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public storeControllerCreateStore(storeCreateDTO: StoreCreateDTO, options?: AxiosRequestConfig) {
        return StoreApiFp(this.configuration).storeControllerCreateStore(storeCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} storeId 
     * @param {number} productId 
     * @param {number} priceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public storeControllerDeletePrice(storeId: number, productId: number, priceId: number, options?: AxiosRequestConfig) {
        return StoreApiFp(this.configuration).storeControllerDeletePrice(storeId, productId, priceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} storeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public storeControllerDeleteStore(storeId: number, options?: AxiosRequestConfig) {
        return StoreApiFp(this.configuration).storeControllerDeleteStore(storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information of store with `storeId`
     * @summary 
     * @param {number} storeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public storeControllerGetStore(storeId: number, options?: AxiosRequestConfig) {
        return StoreApiFp(this.configuration).storeControllerGetStore(storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets products registered for store
     * @summary 
     * @param {number} storeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public storeControllerGetStoreProducts(storeId: number, options?: AxiosRequestConfig) {
        return StoreApiFp(this.configuration).storeControllerGetStoreProducts(storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches for stores within `distance` meters of coords (`lat`,`lon`), with a name that matches `product_id` if provided
     * @summary 
     * @param {number} lat 
     * @param {number} lon 
     * @param {number} distance 
     * @param {number} [productId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public storeControllerSearchStores(lat: number, lon: number, distance: number, productId?: number, options?: AxiosRequestConfig) {
        return StoreApiFp(this.configuration).storeControllerSearchStores(lat, lon, distance, productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} storeId 
     * @param {number} productId 
     * @param {StoreAssignPriceDTO} storeAssignPriceDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public storeControllerUpdatePrice(storeId: number, productId: number, storeAssignPriceDTO: StoreAssignPriceDTO, options?: AxiosRequestConfig) {
        return StoreApiFp(this.configuration).storeControllerUpdatePrice(storeId, productId, storeAssignPriceDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates *ALL* fields of an existing store with id `storeId`
     * @summary 
     * @param {number} storeId 
     * @param {StoreUpdateDTO} storeUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApi
     */
    public storeControllerUpdateStore(storeId: number, storeUpdateDTO: StoreUpdateDTO, options?: AxiosRequestConfig) {
        return StoreApiFp(this.configuration).storeControllerUpdateStore(storeId, storeUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
